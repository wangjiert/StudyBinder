//用来描述内核缓冲区，它是用来在进程间传输数据的
struct binder_buffer{
	//每一个使用Binder进程间通信机制的进程在Binder驱动程序中都有一个内核缓冲区列表，用来保持Binder驱动程序为它所分配的内核缓冲区
	//而entry正好是这个缓冲区列表中的一个节点
	//同时进程又使用了两个红黑树来分别保存那些正在使用的内核缓冲区，以及空闲的内核缓冲区。
	struct list_head entry;
	//如果一个内核缓冲区是空闲的，则rb_node就是空闲内核缓冲区红黑树中的一个节点，否则就是正在使用内核缓冲区红黑树中的一个节点
	struct rb_node rb_node;
	//如果一个内核缓冲区是空闲的，即它的成员变量free的值等于1
	unsigned free : 1;
	//service组件处理完该事务后，如果发现传递给它的内核缓冲区的成员变量allow_user_free的值为1，那么该sercive组件就会请求Binder驱动程序
	//释放该内核缓冲区
	unsigned allow_user_free : 1;
	//如果与一个内核缓冲区关联的是一个异步事务，那么Binder驱动程序就会将该内核缓冲区的成员变量async_tansaction的值设为1.否则设为0，
	//Binder驱动程序限制了分配给异步事务的内核缓冲区大小，这样做的目的是为了保证同步事务可以优先得到内核缓冲区，以便可以快速的对该
	//同步事务进行处理
	unsigned async_tansaction : 1; 
	//用来标志一个内核缓冲区的身份，它是用来帮助调试Binder驱动程序的
	unsigned debug_id : 29;
	//描述一个内核缓冲区正在交给哪一个事务使用
	struct binder_transaction *transaction;
	//描述一个内核缓冲区正在交给哪一个Binder实体对象使用
	struct binder_node *target_node;
	//保存数据缓冲区的大小
	size_t data_size;------------|====>数据缓冲区保存的数据划分为两种类型，其中一种是普通数据，另一种是Binder对象
				     |====>Binder驱动程序不关心数据缓冲区中的普通数据，但是必须要知道里面的Binder对象，
	//保存偏移数组的大小	     |====>因为它需要根据它们来维护内核中的Binder实体对象和Binder引用对象的生命周期
	size_t offsets_size;---------|====>由于数据缓冲区中的普通数据和Binder对象是混合在一起保存的，他们之间并没有固
				     |====>定的顺序，因此，Binder驱动程序就需要额外的数据来找到里面的Binder对象,在数据
				     |====>数据缓冲区的后面，有一个偏移数组，它记录了数据缓冲区中每一个Binder对象在数据
				     |====>缓冲区的位置，
	//指向一块大小可变的数据缓冲区，它是真正用来保存通信数据的
	uint8_t data[0];
};
