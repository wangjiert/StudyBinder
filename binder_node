//用来描述一个Binder实体，Service的每个服务在Binder驱动程序中都有对应的Binder实体对象，用来描述>它在内核中的状态
//Binder驱动程序通过强引用计数和弱引用计数技术来维护它们的生命周期
struct binder_node{
	//用来标志一个Binder实体对象的身份，它是用来帮助调试Binder驱动程序的
	int debug_id;
	//当一个Binder实体对象的引用计数由0变成1，或则由1变成0时，Binder驱动程序就会请求相应的service组件增加或者减少其引用计数，
	//这时候Binder驱动程序就会将该引用计数修改操作封装成一个类型为binder_node的工作项，既将一个binder实体对象的成员变量work
	//的值设置为BINDER_WORK_NODE,并将它添加到相应进程的todo队列中去等待处理
	struct binder_work work;
	union{
		//宿主进程使用一个红黑树来维护它内部所有的Binder实体对象，此变量正好是这个红黑树的一个节点
		struct rb_node rb_node;
		//如果宿主进程已经死亡，那么Binder实体对象就会通过这个变量保存在一个全局的Hash列表中
		struct hlist_node dead_node;
	}
	//指向一个Binder实体对象的宿主进程
	struct binder_proc *proc;
	//由于一个Binder实体对象可能会同时被多个Client组件引用，因此Binder驱动程序使用结构体binder_ref来描诉这些引用关系，
	并且将引用了同一个Binder实体对象的所有引用都保存在一个hash列表中，这个hash列表就是通过这个变量来描述
    	struct hlist_head refs;
    	//描述一个Binder实体对象的强引用计数
  	int internal_strong_refs;
  	//描述一个Binder实体对象的弱应用计数
  	int local_weak_refs;
  	//描述一个Binder实体对象的强引用计数
  	int local_strong_refs;
  	//指向该service组件内部的一个引用计数对象(类型为weakref_impl)的地址
  	void __user *ptr;       ---|
	//指向该Service组件的地址  |==>分别指向一个用户空间地址，它们用来描述用户空间的一个service组件
 	void __user *cookie;    ---|
  
  |----	unsigned has_strong_ref : 1;
  |----	unsigned pending_strong_ref : 1;   
  |----	unsigned has_weak_ref : 1;
  |----	unsigned pending_weak_ref : 1;
  |	//用来描述一个Binder实体对象是否正在处理一个异步事务，如果是，它的值就等于1，否则等于0.
  |	//一般情况下Binder驱动程序都将一个事务保存在一个线程的一个todo队列
  | 	//每一个事务都关联着一个Binder实体对象，表示该事务的目标处理对象，即要求与该Binder实体对象对应的Service组件在指定的线程中处理该事务
  |	unsigned has_async_transaction : 1;
  |	//用来描述一个Binder实体对象是否可以接收包含有文件描述符的进程间通信数据，如果值为1，表示可以接收，否则表示禁止接收，当一个进程向
  |     //另一个进程发送的数据中包含有文件描述符时，Binder驱动程序就会自动在目标进程中打开一个相同的文件
  |	unsigned accept_fds : 1;
  | 	//表示一个Binder实体对象在处理一个来自Client进程的请求时，它所要求的处理线程，即Server进程中的一个线程，应该具备的最小线程优先级，
  |	//这样就保证了与该Binder实体对象对应的Service组件可以在一个具有一定优先级的线程中处理一个来自client进程的通信请求
  |	//一个Service组件在将自己注册到Binder驱动程序时，可以指定这个最小线程优先级，而Binder驱动程序会把这个最小线程优先级保存在相应的
  |     //Binder实体对象的成员变量min_priority中
  |	int main_priority : 8;
  |     //当Binder驱动程序发现一个事务是异步事务时，就会将它保存在目标Binder实体对象的一个异步事务队列中
  |	//因为异步事务不需要等待应答，Binder驱动程序就认为异步事务的优先级低于同步事务，具体表现为同一时刻，
  |	//一个Binder实体对象的所有异步事务至多只有一个会得到处理，其余的都等待在异步事务队列中
  |	struct list_head async_todo;
} |
  |
  |=======>>>>>>当一个Binder实体对象请求一个service组件来执行某一个操作时，会增加该service组件的强引用计数或弱引用计数，
  |=======>>>>>>相应的，Binder实体对象会将其成员变量has_strong_ref和has_weak_ref的值设为1，当一个service组件完成一个Binder实体对象所请
  |=======>>>>>>求的操作后，Binder实体对象会请求减少该Service组件的强引用计数或则弱引用计数，Binder实体对象在请求减少一个Servicr组件增
  |=======>>>>>>加或则减少强引用计数或则弱引用计数的过程中，会将其成员变量pending_strong_ref或则pending_weak_ref的值设为1，当该service
  |=======>>>>>>组件增加或则减少了强引用计数或则弱引用计数之后，Binder实体对象就会将这两个成员变量的值设为0
